#Introduction
WebMark is an open source project that targets to test the performance of browser/web runtime automatically.

#Get Source
Git Clone https://github.com/YupingChen/WebMark.git

#Install prerequisite
[Ubuntu]
    1.install python
    2.apt-get install python-setuptools python-pip
    3.pip install selenium
    4.Download ChromeDriver from http://code.google.com/p/chromedriver/downloads/list. 
	  Make sure ChromeDriver can be located on your PATH or specify its location 
	  via the webdriver.chrome.driver system property 
[Windows]
    1.install python
    2.Download ez_setup.py and run it.
    If the the related .egg file can not be downloaded, download the .egg file to manually,
	make sure the python and found the .egg file, and run ez_setup.py again.
    3.Install selenium
        *from pip
            c:\Python2x\Scripts\easy_install.exe pip
            C:\Python2x\Scripts\pip install ¨CU selenium
        *from source code
           Download source code from http://pypi.python.org/pypi/selenium. 
		   Extract it and enter the folder in the command line. 
		   Execute command: python setup.py install 
    4.Download ChromeDriver from http://code.google.com/p/chromedriver/downloads/list and placed in your PATH.
    5.Download InternetExplorerDriver from http://code.google.com/p/selenium/downloads/list and placed in your PATH.
      On IE 7 or higher on Windows Vista or Windows 7, 
	  you must set the Protected Mode settings for each zone to be the same value. 
	  The value can be on or off, as long as it is the same for every zone. 
	  To set the Protected Mode settings, choose "Internet Options..." from the Tools menu,
	  and click on the Security tab. For each zone, there will be a check box at the bottom of the tab labeled "Enable Protected Mode".
      The browser zoom level must be set to 100% so that the native mouse events can be set to the correct coordinates. 

#Configuration
The WebMark fonfigure file is JSON-formatted. See config-example.json for example.
[Field Summary]
{
    "firefox":{
		"binary":"..."             //optional
        "proxy":{...},             //optional
        "benchmarks":[             //required
            {
              "name":"...",        //required
              "runTimes":<Num>,    //optional
              "args":{...}         //optional
            },
            ...
        ]
    },
    "ie":{...},
    "chrome":{...}
}
[Field Detailed]
1.Browser Type
Now, we support "firefox", "ie" and "chrome"
2.binary
The binary path of the browser, only Chrome and Firefox support the field. 
3.Proxy
A JSON object describing a Proxy configuration. It have the following fieldes
    *proxyType(Required)
        The type of proxy being used. Possible values are: 
			direct - A direct connection - no proxy in use, 
			manual - Manual proxy settings configured, e.g. setting a proxy for HTTP, a proxy for FTP, etc, 
			pac - Proxy autoconfiguration from a URL), 
			autodetect (proxy autodetection, probably with WPAD, 
			system - Use system settings
    proxyAutoconfigUrl(Required if proxyType == pac, Ignored otherwise)
		Specifies the URL to be used for proxy autoconfiguration. Expected format example: http://hostname.com:1234/pacfile
    ftpProxy, httpProxy, sslProxy (Optional, Ignored if proxyType != manual)
		Specifies the proxies to be used for FTP, HTTP and HTTPS requests respectively. 
		Behaviour is undefined if a request is made, where the proxy for the particular protocol is undefined, 
		if proxyType is manual. Expected format example: hostname.com:1234
    noProxy(Optional, Ignored if proxyType != manual)
		Specify some domains which do not use proxy. 
		Expected format example(for Firefox and Chrome): 127.0.0.1,*.intel.com, 
		Expected format example(for IE):*.intel.com;*.google.com 
4.benchmarks 
A list of JSON objects, each object is a benmark configuration.
5.name 
benchmark name
6.runTimes 
Cofigure how many times the benchmark will run, the final result is the average result of these runs.
7.args 
Specify arguments for the benchmark. 
Common arguments for all the benchmark:
	appmode - (only valid in Chrome, ignored for other browsers) 
		If "true" is specified, the benchmark will run in app mode, 
		otherwise, the benchmark will run in browser mode. 
	offline - (only valid if the benchmark support offline mode, ignored otherwise) 
		If "true" is specified, the benchmark will use the local copy, 
		and the benchmark will use online link otherwise.
		

		
#Run WebMark
1.cd <WebMark>
2.python webmark.py <conf> 
<WebMark> == the path of WebMark project
<Conf> == configuration file for WebMark

#Get Result
You can get your result at <WebMark>/benchmark_test_results/result_<datetime>.log
<datetime> == the date & time when run WebMark

#Contacts
<Gu Yang> yang.gu@intel.com
<Yuping Chen> yupingx.chen@intel.com
<Haizhou Hu> haizhoux.hu@intel.com 